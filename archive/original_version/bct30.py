# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bct30', [dirname(__file__)])
        except ImportError:
            import _bct30
            return _bct30
        if fp is not None:
            try:
                _mod = imp.load_module('_bct30', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _bct30 = swig_import_helper()
    del swig_import_helper
else:
    import _bct30
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class bct30(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bct30, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bct30, name)
    __repr__ = _swig_repr

    def getEncoderCnt(self, AxisNumber, posit):
        return _bct30.bct30_getEncoderCnt(self, AxisNumber, posit)

    def getPosition(self, AxisNumber, degrees):
        return _bct30.bct30_getPosition(self, AxisNumber, degrees)

    def getVelocity(self, AxisNumber, velocity):
        return _bct30.bct30_getVelocity(self, AxisNumber, velocity)

    def getDigitalIO(self, channel):
        return _bct30.bct30_getDigitalIO(self, channel)

    def TranslateError(self, buff, buff_len):
        return _bct30.bct30_TranslateError(self, buff, buff_len)

    def GetError(self):
        return _bct30.bct30_GetError(self)

    def setZenith(self):
        return _bct30.bct30_setZenith(self)

    def setPosition(self, AxisNumber, degrees):
        return _bct30.bct30_setPosition(self, AxisNumber, degrees)

    def stopSlew(self, *args):
        return _bct30.bct30_stopSlew(self, *args)

    def estop(self, *args):
        return _bct30.bct30_estop(self, *args)

    def enableAmp(self, AxisNumber, state):
        return _bct30.bct30_enableAmp(self, AxisNumber, state)

    def IsAtTarget(self, AxisNumber):
        return _bct30.bct30_IsAtTarget(self, AxisNumber)

    def IsStopped(self, AxisNumber):
        return _bct30.bct30_IsStopped(self, AxisNumber)

    def MoveRelative(self, AxisNumber, distance):
        return _bct30.bct30_MoveRelative(self, AxisNumber, distance)

    def Jog(self, AxisNumber, distance):
        return _bct30.bct30_Jog(self, AxisNumber, distance)

    def moveTo(self, AxisNumber, degrees):
        return _bct30.bct30_moveTo(self, AxisNumber, degrees)

    def MoveAbsolute(self, AxisNumber, position):
        return _bct30.bct30_MoveAbsolute(self, AxisNumber, position)

    def track(self, *args):
        return _bct30.bct30_track(self, *args)

    def moveRelativeDegrees(self, AxisNumber, degrees):
        return _bct30.bct30_moveRelativeDegrees(self, AxisNumber, degrees)

    def checkHandPaddle(self):
        return _bct30.bct30_checkHandPaddle(self)

    def checkHandPaddle2(self):
        return _bct30.bct30_checkHandPaddle2(self)

    def GetFollowingError(self, AxisNumber, error):
        return _bct30.bct30_GetFollowingError(self, AxisNumber, error)

    def Reset(self, AxisNumber):
        return _bct30.bct30_Reset(self, AxisNumber)

    def getStatus(self, AxisNumber, stat):
        return _bct30.bct30_getStatus(self, AxisNumber, stat)

    def getMode(self, AxisNumber, mode):
        return _bct30.bct30_getMode(self, AxisNumber, mode)

    def __init__(self):
        this = _bct30.new_bct30()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _bct30.delete_bct30
    __del__ = lambda self: None
bct30_swigregister = _bct30.bct30_swigregister
bct30_swigregister(bct30)

# This file is compatible with both classic and new-style classes.


